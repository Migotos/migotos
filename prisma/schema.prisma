generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Necessary for Next-Auth

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// End of Next-Auth

model Cat {
    id          Int        @id @default(autoincrement())
    name        String
    stamnavn    String
    pedigreeurl String?
    description String?
    birth       String
    gender      String
    fertile     Boolean
    father      String
    mother      String
    breeder     String
    owner       String
    slug        String
    CatImage    CatImage[]
}

model CatImage {
    id     Int    @id @default(autoincrement())
    cat_id Int
    src    String
    width  Int
    height Int
    Cat    Cat    @relation(fields: [cat_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Kitten {
    id        Int     @id @default(autoincrement())
    litter_id Int
    name      String
    stamnavn  String
    gender    String
    info      String?
    Litter    Litter  @relation(fields: [litter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model KittenPictureImage {
    id                  Int               @id @default(autoincrement())
    litter_picture_week Int
    title               String?
    src                 String
    width               Int
    height              Int
    LitterPictureWeek   LitterPictureWeek @relation(fields: [litter_picture_week], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Litter {
    id                Int                 @id @default(autoincrement())
    name              String
    born              String
    pedigreeurl       String?
    mother_img        String
    father_img        String
    mother_name       String
    father_name       String
    mother_stamnavn   String
    father_stamnavn   String
    description       String
    slug              String?
    post_image        String?
    Kitten            Kitten[]
    LitterPictureWeek LitterPictureWeek[]
    Tag               Tag[]
}

model LitterPictureWeek {
    id                 Int                  @id @default(autoincrement())
    litter_id          Int
    name               String
    link               String
    KittenPictureImage KittenPictureImage[]
    Litter             Litter               @relation(fields: [litter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Tag {
    id        Int    @id @default(autoincrement())
    value     String
    litter_id Int
    Litter    Litter @relation(fields: [litter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
