generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cat {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  stamnavn    String     @db.VarChar(100)
  pedigreeurl String?    @db.VarChar(255)
  description String?    @db.VarChar(500)
  gender      Gender
  fertile     Boolean
  father      String     @db.VarChar(100)
  mother      String     @db.VarChar(100)
  breeder     String     @db.VarChar(100)
  owner       String     @db.VarChar(100)
  slug        String     @db.VarChar(255)
  nickname    String     @db.VarChar(50)
  birth       DateTime   @db.Date
  CatImage    CatImage[]
  comments    Comment[]
}

model CatImage {
  id       Int     @id @default(autoincrement())
  cat_id   Int
  src      String  @db.VarChar(255)
  width    Int
  height   Int
  blururl  String? @db.VarChar(255)
  priority Int
  Cat      Cat     @relation(fields: [cat_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "CatImage_ibfk_1")

  @@index([cat_id], map: "cat_id")
}

model Kitten {
  id        Int     @id @default(autoincrement())
  litter_id Int
  name      String  @db.VarChar(255)
  stamnavn  String  @db.VarChar(255)
  gender    String  @db.VarChar(255)
  info      String? @db.VarChar(255)
  Litter    Litter  @relation(fields: [litter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Kitten_ibfk_1")

  @@index([litter_id], map: "litter_id")
}

model KittenPictureImage {
  id                  Int               @id @default(autoincrement())
  litter_picture_week Int
  title               String?           @db.VarChar(255)
  src                 String            @db.VarChar(255)
  width               Int
  height              Int
  blururl             String            @db.VarChar(255)
  LitterPictureWeek   LitterPictureWeek @relation(fields: [litter_picture_week], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "KittenPictureImage_ibfk_1")

  @@index([litter_picture_week], map: "litter_picture_week")
}

model Litter {
  id                 Int                 @id @default(autoincrement())
  name               String              @db.VarChar(255)
  pedigreeurl        String?             @db.VarChar(255)
  mother_img         String              @db.VarChar(255)
  father_img         String              @db.VarChar(255)
  mother_name        String              @db.VarChar(255)
  father_name        String              @db.VarChar(255)
  mother_stamnavn    String              @db.VarChar(255)
  father_stamnavn    String              @db.VarChar(255)
  description        String?             @db.VarChar(2000)
  slug               String?             @db.VarChar(255)
  post_image         String?             @db.VarChar(255)
  born               DateTime            @db.Date
  mother_img_blururl String              @db.VarChar(255)
  father_img_blururl String              @db.VarChar(255)
  comments           Comment[]
  Kitten             Kitten[]
  LitterPictureWeek  LitterPictureWeek[]
  Tag                Tag[]
}

model LitterPictureWeek {
  id                 Int                  @id @default(autoincrement())
  litter_id          Int
  name               String               @db.VarChar(255)
  link               String               @db.VarChar(255)
  KittenPictureImage KittenPictureImage[]
  Litter             Litter               @relation(fields: [litter_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "LitterPictureWeek_ibfk_1")

  @@index([litter_id], map: "litter_id")
}

model Tag {
  id        Int    @id @default(autoincrement())
  value     String @db.VarChar(255)
  litter_id Int
  Litter    Litter @relation(fields: [litter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Tag_ibfk_1")

  @@index([litter_id], map: "litter_id")
}

model BlogPost {
  id        Int                     @id @default(autoincrement())
  title     String                  @db.VarChar(255)
  body      String                  @db.VarChar(2000)
  image_url String?                 @db.VarChar(255)
  post_date DateTime                @db.Date
  tags      BlogPostToBlogPostTag[]
  comments  Comment[]
}

model BlogPostTag {
  id    Int                     @id @default(autoincrement())
  value String                  @unique @db.VarChar(255)
  posts BlogPostToBlogPostTag[]
}

model BlogPostToBlogPostTag {
  blogpost_id    Int
  blogposttag_id Int
  blogpost       BlogPost    @relation(fields: [blogpost_id], references: [id])
  blogposttag    BlogPostTag @relation(fields: [blogposttag_id], references: [id])

  @@id([blogpost_id, blogposttag_id])
  @@index([blogposttag_id], map: "BlogPostToBlogPostTag_blogposttag_id_fkey")
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(55)
  email     String   @db.VarChar(101)
  message   String   @db.Text
  createdAt DateTime @default(now())
  subject   String   @db.VarChar(255)
}

model Comment {
  id        Int       @id @default(autoincrement())
  user_id   String
  post_id   Int?
  litter_id Int?
  cat_id    Int?
  comment   String    @db.VarChar(500)
  email     String?   @db.VarChar(101)
  createdAt DateTime  @default(now())
  Cat       Cat?      @relation(fields: [cat_id], references: [id], onDelete: Cascade)
  Litter    Litter?   @relation(fields: [litter_id], references: [id], onDelete: Cascade)
  Post      BlogPost? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([cat_id], map: "Comment_cat_id_fkey")
  @@index([litter_id], map: "Comment_litter_id_fkey")
  @@index([post_id], map: "Comment_post_id_fkey")
  @@index([user_id], map: "Comment_user_id_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  accounts      Account[]
  comments      Comment[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  Female
  Male
}
